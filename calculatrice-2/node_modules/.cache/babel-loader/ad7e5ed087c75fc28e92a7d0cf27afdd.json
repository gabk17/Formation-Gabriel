{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabka\\\\Documents\\\\GitHub\\\\Formation-Gabriel\\\\calculatrice-2\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport * as Operator from './operators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    if (memory === \"Infinity\" || memory === \"-Infinity\") {\n      setMemory(\"Error\");\n    }\n  });\n  const [number, setNumber] = useState(0);\n  const [memory, setMemory] = useState(0);\n  const [operator, setOperator] = useState(null);\n\n  const calculate = () => {\n    // eslint-disable-next-line default-case\n    switch (operator) {\n      case Operator.PLUS:\n        setMemory(memory + number);\n        break;\n\n      case Operator.MINUS:\n        setMemory(memory - number);\n        break;\n\n      case Operator.MULTIPLY:\n        setMemory(memory * number);\n        break;\n\n      case Operator.DIVIDE:\n        setMemory(memory / number);\n        break;\n    }\n  };\n\n  const addNumber = input => {\n    setNumber(parseFloat(number + input));\n\n    if (operator === null) {\n      //New input after pressing equal sign\n      setMemory(0);\n    }\n  };\n\n  const addOperator = input => {\n    setOperator(input);\n\n    if (memory === 0) {\n      setMemory(number);\n    } else {\n      calculate();\n    }\n\n    setNumber(0);\n  };\n\n  const showResult = () => {\n    if (operator === null) {\n      //Keeps number shown after pressing equal without any operator\n      return;\n    }\n\n    calculate();\n    setNumber(0);\n    setOperator(null);\n  };\n\n  const addComma = () => {\n    const stringifyNumber = number.toString();\n    if (stringifyNumber.includes(\".\")) return; //Checks if a stringified version of the number already had 1 comma\n\n    setNumber(number + \".\");\n  };\n\n  const reset = () => {\n    setNumber(0);\n    setMemory(0);\n    setOperator(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: '100px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Memory: \", memory]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Number: \", number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Operator: \", operator]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"1\"),\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"2\"),\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"3\"),\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"4\"),\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"5\"),\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"6\"),\n        children: \"6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"7\"),\n        children: \"7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"8\"),\n        children: \"8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"9\"),\n        children: \"9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addNumber(\"0\"),\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addComma(\".\"),\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addOperator(Operator.DIVIDE),\n        children: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addOperator(Operator.MULTIPLY),\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addOperator(Operator.PLUS),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addOperator(Operator.MINUS),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showResult,\n        children: \"=\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reset,\n        children: \"AC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"45nE+Wxdk4yv1NUO4bJv50jlIVg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/gabka/Documents/GitHub/Formation-Gabriel/calculatrice-2/src/App.js"],"names":["useState","useEffect","Operator","App","memory","setMemory","number","setNumber","operator","setOperator","calculate","PLUS","MINUS","MULTIPLY","DIVIDE","addNumber","input","parseFloat","addOperator","showResult","addComma","stringifyNumber","toString","includes","reset","padding"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport * as Operator from './operators';\n\nfunction App() {\n\nuseEffect(() =>{\n  if(memory === \"Infinity\" || memory === \"-Infinity\"){\n    setMemory(\"Error\")\n  }\n})\n\nconst [number, setNumber] = useState(0);\nconst [memory, setMemory] = useState(0);\nconst [operator, setOperator] = useState(null);\n\nconst calculate = () =>{\n  // eslint-disable-next-line default-case\n    switch(operator){\n      case Operator.PLUS:\n        setMemory(memory + number)\n        break\n      case Operator.MINUS:\n        setMemory(memory - number)\n        break\n      case Operator.MULTIPLY:\n        setMemory(memory * number)\n        break\n      case Operator.DIVIDE:\n        setMemory(memory / number)\n        break\n    }\n}\n\nconst addNumber = (input) => {\n  setNumber(parseFloat(number + input))\n\n  if(operator === null){ //New input after pressing equal sign\n    setMemory(0)\n  }\n}\n\nconst addOperator = (input) => {\n  setOperator(input)\n  \n  if(memory === 0){\n    setMemory(number)\n  }\n  else{\n    calculate()\n  }\n\n  setNumber(0)\n}\n\nconst showResult = () => {\n  if(operator === null){ //Keeps number shown after pressing equal without any operator\n    return\n  }\n\n  calculate()\n  setNumber(0)\n  setOperator(null)\n}\n\nconst addComma = () => {\n  const stringifyNumber = number.toString();\n\n  if (stringifyNumber.includes(\".\")) return; //Checks if a stringified version of the number already had 1 comma\n\n  setNumber(number + \".\");\n  }\n\nconst reset = () => {\n  setNumber(0)\n  setMemory(0)\n  setOperator(null)\n}\n\n  return (\n    <div className=\"App\" style={{padding: '100px'}}>\n      <span>Memory: {memory}</span> <br />\n      <span>Number: {number}</span> <br />\n      <span>Operator: {operator}</span> \n\n      <div>\n        <button onClick={() => addNumber(\"1\")}>1</button>\n        <button onClick={() => addNumber(\"2\")}>2</button>\n        <button onClick={() => addNumber(\"3\")}>3</button>\n        <button onClick={() => addNumber(\"4\")}>4</button>\n        <button onClick={() => addNumber(\"5\")}>5</button>\n        <button onClick={() => addNumber(\"6\")}>6</button>\n        <button onClick={() => addNumber(\"7\")}>7</button>\n        <button onClick={() => addNumber(\"8\")}>8</button>\n        <button onClick={() => addNumber(\"9\")}>9</button>\n        <button onClick={() => addNumber(\"0\")}>0</button>\n        <button onClick={() => addComma(\".\")}>.</button>\n\n        <button onClick={() => addOperator(Operator.DIVIDE)}>/</button>\n        <button onClick={() => addOperator(Operator.MULTIPLY)}>*</button>\n        <button onClick={() => addOperator(Operator.PLUS)}>+</button>\n        <button onClick={() => addOperator(Operator.MINUS)}>-</button>\n\n        <button onClick={showResult}>=</button>\n        <button onClick={reset}>AC</button>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}